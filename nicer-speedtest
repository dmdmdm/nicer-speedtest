#!/bin/python3
# Based on https://github.com/sivel/speedtest-cli/wiki

import os
import sys
import speedtest

servers = []
# If you want to test against a specific server
# servers = [1234]

threads = None
# If you want to use a single threaded test
# threads = 1

clear_to_eol = '\033[K'

progress_label = ''

def progress_bar(current, total, start=False, end=False):
	global progress_label, clear_to_eol;
	empty = ' '
	cursor = '>'
	filled = '='
	header = '({:d}/{:d})'.format(current + 1, total)
	_, columns = os.popen('stty size', 'r').read().split()
	width = (int(columns) // 2) - len(header) - 4
	completion = width * (current + 1) // total
	progress = '[{}{}{}]'.format(filled * (completion - 1), cursor,
			     empty * (width - completion))
	status_bar = '{} {}'.format(header, progress)
	
	# Print updated status bar
	sys.stdout.write(clear_to_eol + '{}\r'.format(progress_label + status_bar))
	if current + 1 == total and end is True:
		sys.stdout.write(clear_to_eol)  # clear to end of line
	sys.stdout.flush()

def main():
	global servers, threads, progress_label, clear_to_eol
	sys.stdout.write('Retrieving speedtest.net configuration...\r')
	s = speedtest.Speedtest()
	sys.stdout.write(clear_to_eol)
	config = s.get_config()
	client = config['client']
	isp = client['isp']
	ip = client['ip']
	print('Testing from %(isp)s (%(ip)s)...' % client)
	sys.stdout.write('Retrieving speedtest.net server list...\r')
	s.get_servers(servers)
	sys.stdout.write(clear_to_eol)
	sys.stdout.write('Selecting best server based on ping...\r')
	best = s.get_best_server()
	sys.stdout.write(clear_to_eol)
	print('Hosted by %(sponsor)s (%(name)s) [%(d)0.2f km]: %(latency)s ms' % best)
	
	progress_label = 'Testing download... '
	s.download(callback=progress_bar, threads=threads)
	results = s.results.dict()
	download = results['download']
	print('Download: %0.2f MB/s' % ((download / 1000.0 / 1000.0)))
	
	progress_label = 'Testing upload... '
	s.upload(callback=progress_bar, threads=threads)
	results = s.results.dict()
	upload = results['upload']
	print('Upload: %0.2f MB/s' % ((upload / 1000.0 / 1000.0)))
	
	s.results.share()

main()
